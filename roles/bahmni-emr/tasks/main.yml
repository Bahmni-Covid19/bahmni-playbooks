- name: add mysql 5.6 yum repo
  template:
    src=mysql.repo.j2
    dest=/etc/yum.repos.d/mysql.repo

- name: Check if openmrs database dump is provided in /etc/bahmni-installer/deployment-artifacts
  local_action: stat path=/etc/bahmni-installer/deployment-artifacts/mysql_dump.sql
  register: mysql_dump_file

- name: Copy file to remote location if it is available
  copy: src=/etc/bahmni-installer/deployment-artifacts/mysql_dump.sql
        dest=/etc/bahmni-installer/deployment-artifacts/mysql_dump.sql
        mode=644
        owner={{ bahmni_user }}
        group={{ bahmni_group }}
  when: mysql_dump_file.stat.exists == True

- name: Install openmrs database dump if provided and database does not exist
  script: restore_mysql_dump.sh
  sudo: yes
  when: mysql_dump_file.stat.exists == True

- name: Check if openmrs rpm needs an update
  command: yum list installed openmrs
  register: installed_openmrs
  ignore_errors: true

- name: Uninstall openmrs rpm
  yum: name="openmrs" state=absent
  when: installed_openmrs.stdout.find("{{ openmrs_version }}") == -1

- name: Install openmrs from bahmni-repo
  yum: name="openmrs-{{ openmrs_version }}" state=present

- name: Check if bahmni-emr rpm needs an update
  command: yum list installed bahmni-emr
  register: installed_bahmni_emr
  ignore_errors: true

- name: Uninstall bahmni-emr rpm
  yum: name="bahmni-emr" state=absent
  when: installed_bahmni_emr.stdout.find("{{ bahmni_emr_version }}") == -1

- name: Install bahmni-emr from bahmni-repo
  yum: name="bahmni-emr-{{ bahmni_emr_version }}" state=present

- name: Copy openmrs conf
  template:
    src=openmrs.conf.j2
    dest={{ openmrs_install_dir }}/etc/openmrs.conf
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Copy openmrs-runtime properties
  template:
    src=openmrs-runtime.properties.j2
    dest={{ openmrs_install_dir }}/etc/openmrs-runtime.properties
    mode=644
    owner={{ bahmni_user }}
    group={{ bahmni_group }}

- name: Get matched IpTable rule
  shell: iptables -nL --line-numbers | grep OPENMRS  -m 1 | cut -c 1-2
  register: matchedRule

- name: delete matching rule if exists
  shell: iptables -D INPUT {{ matchedRule.stdout }}
  when: matchedRule.stdout!=""
 
- name: Allow openmrs port through firewall
  command: /sbin/iptables -I INPUT 1 -p tcp --dport  {{ openmrs_port }} -j ACCEPT -m comment --comment "OPENMRS"

- name: save iptables
  command: service iptables save

- name: Retrieve salt from users
  command: >
    mysql --user={{ mysql_root_user }} --password={{ mysql_root_password }} openmrs
    --host={{ groups['bahmni-emr-db'][0] }} --batch --skip-column-names
    --execute="SELECT salt from users where username='{{ openmrs_user_id }}' or system_id='{{ openmrs_user_id }}';"
  register: salt
  always_run: True
  changed_when: False

- name: Encrypt password
  command: python -c "import hashlib; print(hashlib.sha512(('{{ openmrs_user_password }}'+'{{ salt.stdout }}').encode()).hexdigest())"
  register: hashedPassword

- name: Update password in DB
  command: >
      mysql --user={{mysql_root_user}} --password={{mysql_root_password}} openmrs
      --host={{ groups['bahmni-emr-db'][0] }} --batch --skip-column-names
      --execute="UPDATE users set password='{{ hashedPassword.stdout }}' where username='{{ openmrs_user_id }}' or system_id='{{ openmrs_user_id }}';"
  always_run: True
  changed_when: False

- name: download omod
  get_url: url=https://bahmni-repo.twhosted.com/omod/{{ item }} dest=/opt/openmrs/modules owner={{ bahmni_user }} group={{ bahmni_group }} mode=755
  with_items: "{{ omods }}"

- name: Switch off checkconfig for openmrs on passive
  service: name=openmrs state=stopped enabled=no
  when: passive is defined and passive == 'yes'

- name: Stop openmrs
  service: name=openmrs state=stopped
  when: passive is not defined or passive != 'yes'
  tags: stop_bahmni

- name: Start openmrs
  service: name=openmrs state=started enabled=yes
  when: passive is not defined or passive != 'yes'
  tags: start_bahmni

- name: Check openmrs
  command: service openmrs status
  when: passive is not defined or passive != 'yes'
  tags: check_status

